pub mod vars;

use serde::{Deserialize, Serialize};
use std::ffi::OsString;
use std::fs;
use std::fs::File;
use std::io;
use std::io::ErrorKind;
use std::path::PathBuf;
use std::str::FromStr;

use toml::from_str;

#[derive(Debug, Deserialize)]
pub struct SuiteConfig {
    pub target_dir: Option<String>,
    pub file_size: Option<u64>,
    pub report_config: Option<ReportConfig>,
    pub tests: Option<Vec<TestConfig>>,
}

#[derive(Debug, Deserialize)]
pub struct ReportConfig {
    pub output_dir: Option<String>,
}

#[derive(Debug, Deserialize)]
pub struct TestConfig {
    pub test: String,
    pub target_dir: Option<String>,
    pub iterations: Option<u64>,
}

#[test]
fn read_config() {
    let toml_str = r#"
        target_dir = "/tmp/target"
        file_size_bytes = 5
        [report_config]
        output_dir = "/tmp/reports"
        [[tests]]
        test = "async"
        target_dir = "/tmp/target"
        iterations = 1
        [[tests]]
        test = "bsync"
        target_dir = "/tmp/target"
        iterations = 1
    "#;

    println!("test");
    let decoded: SuiteConfig = toml::from_str(toml_str).unwrap();
    println!("{:#?}", decoded);
}
